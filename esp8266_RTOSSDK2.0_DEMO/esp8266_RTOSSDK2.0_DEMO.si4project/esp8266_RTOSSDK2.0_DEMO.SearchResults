---- wifi_station_is_connected Matches (9 in 1 files) ----
wifi_state_machine.c (user) line 47 : volatile bool wifi_station_is_connected = false;
wifi_event_handler_cb in wifi_state_machine.c (user) :             wifi_station_is_connected = false;
wifi_event_handler_cb in wifi_state_machine.c (user) :                 wifi_station_is_connected = true;
wifi_event_handler_cb in wifi_state_machine.c (user) :             if(wifi_station_is_connected){
wifi_event_handler_cb in wifi_state_machine.c (user) :                 wifi_station_is_connected = false;
wifi_event_handler_cb in wifi_state_machine.c (user) :             wifi_station_is_connected = true;
wifi_station_connected in wifi_state_machine.c (user) :     if(!wifi_station_is_connected){
wifi_station_connected in wifi_state_machine.c (user) :     wifi_station_is_connected = (wifistate == STATION_GOT_IP || (wifi_station_static_ip && wifistate == STATION_CONNECTING));
wifi_station_connected in wifi_state_machine.c (user) :     return wifi_station_is_connected;
---- ip: Matches (1 in 1 files) ----
net.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\mbedtls) line 97 :  * \brief          Create a receiving socket on bind_ip:port in the chosen
---- wifi_station_static_ip Matches (3 in 1 files) ----
wifi_state_machine.c (user) line 46 : volatile bool wifi_station_static_ip = false;
wifi_event_handler_cb in wifi_state_machine.c (user) :             if(wifi_station_static_ip){
wifi_station_connected in wifi_state_machine.c (user) :     wifi_station_is_connected = (wifistate == STATION_GOT_IP || (wifi_station_static_ip && wifistate == STATION_CONNECTING));
---- switch (pcb->state) Matches (3 in 2 files) ----
tcp_close_shutdown in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   switch (pcb->state) {
tcp_shutdown in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     switch (pcb->state) {
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   switch (pcb->state) {
---- tcp_shutdown Matches (5 in 4 files) ----
lwip_netconn_do_close_internal in api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) :     err = tcp_shutdown(conn->pcb.tcp, shut_rx, shut_tx);
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 347 : tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 184 : #define TF_RXCLOSED    ((u8_t)0x10U)   /* rx closed by tcp_shutdown */
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 357 : err_t            tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx);
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
---- tcp_pcb Matches (269 in 11 files) ----
api.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 154 : struct tcp_pcb;
netconn::{anonpcb} in api.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :     struct tcp_pcb *tcp;
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 217 :  * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 220 : recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 284 :  * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 287 : poll_tcp(void *arg, struct tcp_pcb *pcb)
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 321 :  * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 324 : sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 359 :  * @see tcp.h (struct tcp_pcb.err) for parameters
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 428 :  * Setup a tcp_pcb with the correct callback function pointers
setup_tcp in api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) :   struct tcp_pcb *pcb;
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 450 :  * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 453 : accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
accept_function in api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) :     struct tcp_pcb* pcb = newconn->pcb.tcp;
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 1009 :  * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) line 1012 : lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
lwip_netconn_do_listen in api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) :           struct tcp_pcb* lpcb;
memp_std.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 42 : LWIP_MEMPOOL(TCP_PCB,        MEMP_NUM_TCP_PCB,         sizeof(struct tcp_pcb),        "TCP_PCB")
memp_std.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 43 : LWIP_MEMPOOL(TCP_PCB_LISTEN, MEMP_NUM_TCP_PCB_LISTEN,  sizeof(struct tcp_pcb_listen), "TCP_PCB_LISTEN")
tcp_get_value in mib2.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core\snmp) :         struct tcp_pcb *pcb = tcp_active_pcbs;
netif_set_ipaddr in netif.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb;
netif_set_ipaddr in netif.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb_listen *lpcb;
netif_set_ipaddr in netif.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
netif_set_ipaddr in netif.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :         struct tcp_pcb *next = pcb->next;
pbuf_free_ooseq in pbuf.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb* pcb;
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 116 : struct tcp_pcb *tcp_bound_pcbs;
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 121 : struct tcp_pcb *tcp_active_pcbs;
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 123 : struct tcp_pcb *tcp_tw_pcbs;
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 128 : struct tcp_pcb ** const tcp_pcb_lists[] ICACHE_RODATA_ATTR STORE_ATTR = {&tcp_listen_pcbs.pcbs, &tcp_bound_pcbs,
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 132 : struct tcp_pcb *tcp_tmp_pcb;
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 199 :  * @param pcb the tcp_pcb to close
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 204 : tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
tcp_close_shutdown in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       tcp_pcb_purge(pcb);
tcp_close_shutdown in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 314 :  * @param pcb the tcp_pcb to close
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 319 : tcp_close(struct tcp_pcb *pcb)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 347 : tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 387 :  * @param pcb the tcp_pcb to abort
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 391 : tcp_abandon(struct tcp_pcb *pcb, int reset)
tcp_abandon in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     tcp_pcb_remove(&tcp_tw_pcbs, pcb);
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 448 : tcp_abort(struct tcp_pcb *pcb)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 458 :  * @param pcb the tcp_pcb to bind (no check is done whether this pcb is
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 468 : tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
tcp_bind in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *cpcb;
tcp_bind in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 531 : tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 547 :  * @param pcb the original tcp_pcb
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 549 :  * @return tcp_pcb used for listening, consumes less memory.
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 551 :  * @note The original tcp_pcb is freed. This function therefore has to be
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 555 : struct tcp_pcb *
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 556 : tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
tcp_listen_with_backlog in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb_listen *lpcb;
tcp_listen_with_backlog in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
tcp_listen_with_backlog in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
tcp_listen_with_backlog in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   return (struct tcp_pcb *)lpcb;
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 620 : struct tcp_pcb *
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 621 : tcp_listen_dual_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
tcp_listen_dual_with_backlog in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *lpcb;
tcp_listen_dual_with_backlog in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     ((struct tcp_pcb_listen*)lpcb)->accept_any_ip_version = 1;
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 644 : tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 672 :  * @param pcb the tcp_pcb for which data is read
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 676 : tcp_recved(struct tcp_pcb *pcb, u16_t len)
tcp_new_port in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb;
tcp_new_port in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 747 :  * @param pcb the tcp_pcb used to establish the connection
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 756 : tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,
tcp_connect in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     struct tcp_pcb *cpcb;
tcp_connect in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
tcp_slowtmr in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb, *prev;
tcp_slowtmr in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       struct tcp_pcb *pcb2;
tcp_slowtmr in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       tcp_pcb_purge(pcb);
tcp_slowtmr in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       struct tcp_pcb *pcb2;
tcp_slowtmr in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       tcp_pcb_purge(pcb);
tcp_fasttmr in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb;
tcp_fasttmr in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       struct tcp_pcb *next;
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1160 : tcp_process_refused_data(struct tcp_pcb *pcb)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1234 :  * @param pcb the tcp_pcb to manipulate
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1238 : tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1272 : tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
tcp_kill_prio in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb, *inactive;
tcp_kill_timewait in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb, *inactive;
tcp_kill_finwait2 in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) : 	struct tcp_pcb *pcb, *inactive;
tcp_kill_finwait2 in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) : 		tcp_pcb_remove(&tcp_active_pcbs, inactive);
tcp_kill_lastack in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) : 	struct tcp_pcb *pcb, *inactive;
tcp_kill_lastack in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) : 		tcp_pcb_remove(&tcp_active_pcbs, inactive);
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1398 :  * Allocate a new tcp_pcb structure.
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1401 :  * @return a new tcp_pcb that initially is in state CLOSED
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1403 : struct tcp_pcb *
tcp_alloc in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb;
tcp_alloc in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
tcp_alloc in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     /* Try to allocate a tcp_pcb again. */
tcp_alloc in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
tcp_alloc in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       /* Try to allocate a tcp_pcb again. */
tcp_alloc in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
tcp_alloc in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     memset(pcb, 0, sizeof(struct tcp_pcb));
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1518 :  * @return a new tcp_pcb that initially is in state CLOSED
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1520 : struct tcp_pcb *
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1532 :  * @return a new tcp_pcb that initially is in state CLOSED
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1534 : struct tcp_pcb *
tcp_new_ip6 in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb * pcb;
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1548 :  * @param pcb tcp_pcb to set the callback argument
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1552 : tcp_arg(struct tcp_pcb *pcb, void *arg)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1564 :  * @param pcb tcp_pcb to set the recv callback
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1568 : tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1578 :  * @param pcb tcp_pcb to set the sent callback
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1582 : tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1592 :  * @param pcb tcp_pcb to set the err callback
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1597 : tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1607 :  * @param pcb tcp_pcb to set the accept callback
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1612 : tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1628 : tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1643 :  * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1646 : tcp_pcb_purge(struct tcp_pcb *pcb)
tcp_pcb_purge in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
tcp_pcb_purge in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       struct tcp_pcb_listen *lpcb;
tcp_pcb_purge in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
tcp_pcb_purge in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :             LWIP_ASSERT("tcp_pcb_purge: listen pcb does not have accepts pending",
tcp_pcb_purge in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
tcp_pcb_purge in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
tcp_pcb_purge in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
tcp_pcb_purge in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1712 :  * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1715 : tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
tcp_pcb_remove in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   tcp_pcb_purge(pcb);
tcp_pcb_remove in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1899 :  * Print all tcp_pcbs in every list for debugging purposes.
tcp_debug_print_pcbs in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb;
tcp_debug_print_pcbs in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   for(pcb = (struct tcp_pcb *)tcp_listen_pcbs.pcbs; pcb != NULL; pcb = pcb->next) {
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1929 :  * Check state consistency of the tcp_pcb lists.
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1932 : tcp_pcbs_sane(void)
tcp_pcbs_sane in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb;
tcp_pcbs_sane in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
tcp_pcbs_sane in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
tcp_pcbs_sane in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
tcp_pcbs_sane in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 51 : struct tcp_pcb;
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 62 : typedef err_t (*tcp_accept_fn)(void *arg, struct tcp_pcb *newpcb, err_t err);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 74 : typedef err_t (*tcp_recv_fn)(void *arg, struct tcp_pcb *tpcb,
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 88 : typedef err_t (*tcp_sent_fn)(void *arg, struct tcp_pcb *tpcb,
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 100 : typedef err_t (*tcp_poll_fn)(void *arg, struct tcp_pcb *tpcb);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 126 : typedef err_t (*tcp_connected_fn)(void *arg, struct tcp_pcb *tpcb, err_t err);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 144 :    * @param arg user-supplied argument (tcp_pcb.callback_arg)
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 145 :    * @param pcb a new tcp_pcb that now is connected
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 156 :  * members common to struct tcp_pcb and struct tcp_listen_pcb
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 170 : struct tcp_pcb {
tcp_pcb in tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :   TCP_PCB_COMMON(struct tcp_pcb);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 286 : struct tcp_pcb_listen {
tcp_pcb_listen in tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :   TCP_PCB_COMMON(struct tcp_pcb_listen);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 312 : err_t lwip_tcp_event(void *arg, struct tcp_pcb *pcb,
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 321 : struct tcp_pcb * tcp_new     (void);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 323 : void             tcp_arg     (struct tcp_pcb *pcb, void *arg);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 324 : void             tcp_accept  (struct tcp_pcb *pcb, tcp_accept_fn accept);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 325 : void             tcp_recv    (struct tcp_pcb *pcb, tcp_recv_fn recv);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 326 : void             tcp_sent    (struct tcp_pcb *pcb, tcp_sent_fn sent);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 327 : void             tcp_poll    (struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 328 : void             tcp_err     (struct tcp_pcb *pcb, tcp_err_fn err);
tcp_accepted in tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :   (((struct tcp_pcb_listen *)(pcb))->accepts_pending--); } while(0)
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 346 : void             tcp_recved  (struct tcp_pcb *pcb, u16_t len);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 347 : err_t            tcp_bind    (struct tcp_pcb *pcb, ip_addr_t *ipaddr,
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 349 : err_t            tcp_connect (struct tcp_pcb *pcb, ip_addr_t *ipaddr,
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 352 : struct tcp_pcb * tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 355 : void             tcp_abort (struct tcp_pcb *pcb);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 356 : err_t            tcp_close   (struct tcp_pcb *pcb);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 357 : err_t            tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 363 : err_t            tcp_write   (struct tcp_pcb *pcb, const void *dataptr, u16_t len,
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 366 : void             tcp_setprio (struct tcp_pcb *pcb, u8_t prio);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 372 : err_t            tcp_output  (struct tcp_pcb *pcb);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 378 : struct tcp_pcb * tcp_new_ip6 (void);
tcp.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 383 : struct tcp_pcb * tcp_listen_dual_with_backlog(struct tcp_pcb *pcb, u8_t backlog);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 68 : struct tcp_pcb * tcp_alloc   (u8_t prio);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 69 : void             tcp_abandon (struct tcp_pcb *pcb, int reset);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 70 : err_t            tcp_send_empty_ack(struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 71 : void             tcp_rexmit  (struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 72 : void             tcp_rexmit_rto  (struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 73 : void             tcp_rexmit_fast (struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 74 : u32_t            tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 75 : err_t            tcp_process_refused_data(struct tcp_pcb *pcb);
tcp_seg in tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :                               tcp_pcb.unsent_oversized only) */
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 308 : extern struct tcp_pcb *tcp_input_pcb;
tcp_listen_pcbs_t in tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :   struct tcp_pcb_listen *listen_pcbs; 
tcp_listen_pcbs_t in tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :   struct tcp_pcb *pcbs;
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 317 : extern struct tcp_pcb *tcp_bound_pcbs;
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 319 : extern struct tcp_pcb *tcp_active_pcbs;  /* List of all TCP PCBs that are in a
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 322 : extern struct tcp_pcb *tcp_tw_pcbs;      /* List of all TCP PCBs in TIME-WAIT. */
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 324 : extern struct tcp_pcb *tcp_tmp_pcb;      /* Only used for temporary storage. */
TCP_REG in tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :                             LWIP_ASSERT("TCP_RMV: tcp_pcbs sane", tcp_pcbs_sane()); \
TCP_RMV in tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :                             LWIP_ASSERT("TCP_RMV: tcp_pcbs sane", tcp_pcbs_sane()); \
TCP_PCB_REMOVE_ACTIVE in tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) :     tcp_pcb_remove(&tcp_active_pcbs, pcb);         \
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 417 : struct tcp_pcb *tcp_pcb_copy(struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 418 : void tcp_pcb_purge(struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 419 : void tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 441 : err_t tcp_send_fin(struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 442 : err_t tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 444 : void tcp_rexmit_seg(struct tcp_pcb *pcb, struct tcp_seg *seg);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 463 : void tcp_keepalive(struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 464 : void tcp_zero_window_probe(struct tcp_pcb *pcb);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 480 : err_t tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 488 : s16_t tcp_pcbs_sane(void);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 494 : #  define tcp_pcbs_sane() 1
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 81 : struct tcp_pcb *tcp_input_pcb;
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 84 : static err_t tcp_process(struct tcp_pcb *pcb);
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 85 : static void tcp_receive(struct tcp_pcb *pcb);
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 86 : static void tcp_parseopt(struct tcp_pcb *pcb);
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 88 : static err_t tcp_listen_input(struct tcp_pcb_listen *pcb);
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 89 : static err_t tcp_timewait_input(struct tcp_pcb *pcb);
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *pcb, *prev;
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb_listen *lpcb;
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *lpcb_prev = NULL;
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb_listen *lpcb_any = NULL;
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       prev = (struct tcp_pcb *)lpcb;
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :         ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :         tcp_pcb_remove(&tcp_active_pcbs, pcb);
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :         tcp_pcb_remove(&tcp_active_pcbs, pcb);
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 462 :  * @param pcb the tcp_pcb_listen for which a segment arrived
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 471 : tcp_listen_input(struct tcp_pcb_listen *pcb)
tcp_listen_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   struct tcp_pcb *npcb;
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 558 :  * @param pcb the tcp_pcb for which a segment arrived
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 564 : tcp_timewait_input(struct tcp_pcb *pcb)
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 604 :  * @param pcb the tcp_pcb for which a segment arrived
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 610 : tcp_process(struct tcp_pcb *pcb)
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :         tcp_pcb_purge(pcb);
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       tcp_pcb_purge(pcb);
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       tcp_pcb_purge(pcb);
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 883 : tcp_receive(struct tcp_pcb *pcb)
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1589 :  * @param pcb the tcp_pcb for which a segment arrived
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1592 : tcp_parseopt(struct tcp_pcb *pcb)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 88 : static void tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb);
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 101 : tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 128 :  * @param pcb the tcp_pcb over which to send a segment
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 132 : tcp_send_fin(struct tcp_pcb *pcb)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 166 : tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
tcp_pbuf_prealloc in tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :                   u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 301 : tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 361 : tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 731 : tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 833 :  * @param pcb tcp_pcb
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 837 : tcp_build_timestamp_option(struct tcp_pcb *pcb, u32_t *opts)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 851 : tcp_send_empty_ack(struct tcp_pcb *pcb)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 911 : tcp_output(struct tcp_pcb *pcb)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1063 :  * @param pcb the tcp_pcb for the TCP connection used to send the segment
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1066 : tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1199 :  * tcp_rst() has a number of arguments that are taken from a tcp_pcb for
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1256 :  * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1259 : tcp_rexmit_rto(struct tcp_pcb *pcb)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1292 :  * @param pcb the tcp_pcb for which to retransmit the first unacked segment
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1295 : tcp_rexmit(struct tcp_pcb *pcb)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1338 :  * @param pcb the tcp_pcb for which to retransmit the first unacked segment
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1341 : tcp_rexmit_fast(struct tcp_pcb *pcb)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1381 :  * @param pcb the tcp_pcb for which to send a keepalive packet
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1384 : tcp_keepalive(struct tcp_pcb *pcb)
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1434 :  * @param pcb the tcp_pcb for which to send a zero-window probe packet
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1437 : tcp_zero_window_probe(struct tcp_pcb *pcb)
---- tcp_process Matches (18 in 5 files) ----
accept_function in api_msg.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\api) :     /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
tcp_fasttmr in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :         tcp_process_refused_data(pcb);
tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1160 : tcp_process_refused_data(struct tcp_pcb *pcb)
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 75 : err_t            tcp_process_refused_data(struct tcp_pcb *pcb);
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 8 :  * tcp_input() -> * tcp_process() -> tcp_receive() (-> application).
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 84 : static err_t tcp_process(struct tcp_pcb *pcb);
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 93 :  * the segment between the PCBs and passes it on to tcp_process(), which implements
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     err = tcp_process(pcb);
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 610 : tcp_process(struct tcp_pcb *pcb)
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 871 :  * Called by tcp_process. Checks if the given segment is an ACK for outstanding
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 880 :  * Called from tcp_process().
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1586 :  * Called from tcp_listen_input() and tcp_process().
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1196 :  * has ACK flag set) and tcp_process() (received segment in the wrong state)
---- tcp_input Matches (42 in 8 files) ----
ip4.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core\ipv4) line 572 :       tcp_input(p, inp);
ip6_input in ip6.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core\ipv6) :       tcp_input(p, inp);
netif.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 783 :  * reentering non-reentrant functions like tcp_input(). Packets passed to
opt.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 1187 :  * tcp_input().
tcp_process_refused_data in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
tcp_process_refused_data in tcp.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 66 : void             tcp_input   (struct pbuf *p, struct netif *inp);
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 155 :  * Some fields are converted to host byte order in tcp_input().
tcp_impl.h (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\include\lwip\lwip) line 308 : extern struct tcp_pcb *tcp_input_pcb;
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 8 :  * tcp_input() -> * tcp_process() -> tcp_receive() (-> application).
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 70 :    processing of TCP segments. They are set by the tcp_input()
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 81 : struct tcp_pcb *tcp_input_pcb;
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 101 : tcp_input(struct pbuf *p, struct netif *inp)
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     tcp_input_pcb = pcb;
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :             LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: keep incoming packet, because pcb is \"full\"\n"));
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :         tcp_input_pcb = NULL;
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     tcp_input_pcb = NULL;
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :     LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
tcp_input in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   PERF_STOP("tcp_input");
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 459 :  * Called by tcp_input() when a segment arrives for a listening
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 460 :  * connection (from tcp_input()).
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 466 :  * @note the return value is not (yet?) used in tcp_input()
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 555 :  * Called by tcp_input() when a segment arrives for a connection in
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 599 :  * Implements the TCP state machine. Called by tcp_input. In some
tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 601 :  * argument will be freed by the caller (tcp_input()) unless the
tcp_process in tcp_in.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :       LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
tcp_output in tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   if (tcp_input_pcb == pcb) {
tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) line 1194 :  * Called by tcp_abort() (to abort a local connection), tcp_input() (if no
tcp_rexmit in tcp_out.c (D:\svn_work\Code\ESP8266_RTOS_SDK-2.0.0\third_party\lwip\core) :   /* No need to call tcp_output: we are always called from tcp_input()
---- UartBuffer Matches (13 in 2 files) ----
myuart.c (user) line 49 : uint16 UartBuffer_datacount;
myuart.c (user) line 51 : struct UartBuffer * pRxBuffer = NULL;
uart0_rx_intr_handler in myuart.c (user) : 		UartBuffer_datacount++;	
uart0_rx_intr_handler in myuart.c (user) : 		if(UART_FIFO_LEN>UartBuffer_datacount)
uart0_rx_intr_handler in myuart.c (user) : 				UartBuffer_datacount=0;
uart0_rx_intr_handler in myuart.c (user) : 		UartBuffer_datacount++;	
uart0_rx_intr_handler in myuart.c (user) : 		if(UART_FIFO_LEN>UartBuffer_datacount)
uart0_rx_intr_handler in myuart.c (user) : 				UartBuffer_datacount=0;
uart0_rx_intr_handler in myuart.c (user) : 		CheckUartData(pRxBuffer->pUartBuff,UartBuffer_datacount);
uart0_rx_intr_handler in myuart.c (user) : 		UartBuffer_datacount=0;
CheckUartData in myuart.c (user) : 	UartBuffer_datacount=0;
myuart.h (include) line 117 : struct UartBuffer{
UartBuffer in myuart.h (include) :     struct  UartBuffer     *  nextBuff;
---- PacketSavedataSimpleString Matches (10 in 3 files) ----
EdpKit.c (user) line 1091 : EdpPacket* ICACHE_FLASH_ATTR ICACHE_FLASH_ATTRPacketSavedataSimpleString(const char* dst_devid, const char* input, uint16 msg_id)
EdpKit.c (user) line 1135 : EdpPacket* ICACHE_FLASH_ATTR PacketSavedataSimpleStringWithTime(const char* dst_devid, const char* input, const LPDataTime op_time, uint16 msg_id){
EdpKit.h (include) line 685 :  * 函数名:  PacketSavedataSimpleString
EdpKit.h (include) line 703 : EdpPacket* PacketSavedataSimpleString(const char* dst_devid, const char* input, uint16 msg_id);
EdpKit.h (include) line 711 :  * 相关函数: PacketSavedataSimpleString
EdpKit.h (include) line 724 :  * 函数名:  PacketSavedataSimpleStringWithTime
EdpKit.h (include) line 743 : EdpPacket* PacketSavedataSimpleStringWithTime(const char* dst_devid, const char* input,const LPDataTime at, uint16 msg_id);
EdpKit.h (include) line 752 :  * 相关函数: PacketSavedataSimpleStringWithTime
tcp_client_task in mytcp.c (user) : 							send_pkg = PacketSavedataSimpleString(0, (char *)&tcp_send_buffer, 0);
tcp_client_task in mytcp.c (user) : 							printf("\r\n PacketSavedataSimpleString ok \r\n");
